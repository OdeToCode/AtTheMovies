{"version":3,"file":"arrows.js","sources":["arrows.js"],"names":[],"mappings":"AAAA;AAAA,CAAA,OAAQ,CAAC,iBAAiB,CAAE,UAAS;AAEjC,CAAA,GAAE,CAAC,+CAA+C,CAAE,UAAS;OAErD,CAAA,GAAG,IAAG,SAAA,AAAC,CAAC,CAAC,CAAA,CAAC,AAAC;YAAI,CAAA,CAAC,EAAG,EAAC;KAAA,CAAA;OACpB,CAAA,MAAM,IAAG,SAAA,CAAC;YAAI,CAAA,CAAC,EAAG,EAAC;KAAA,CAAA;OACnB,CAAA,GAAG,IAAG,SAAA,AAAE;YAAI,CAAA,OAAO,IAAI,CAAC,QAAQ,CAAC;KAAA,CAAA;AAErC,CAAA,MAAG,EAAE,CAAC;OACF,CAAA,MAAM,EAAG,CAAA,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;AAC7B,CAAA,SAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;GAE3B,CAAC,CAAC;AAEH,CAAA,GAAE,CAAC,kCAAkC,CAAE,UAAS;AAExC,CAAJ,MAAI,CAAA,MAAM,EAAG,CAAA,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,IAAI,EAAC,SAAA,CAAC;YAAI,CAAA,CAAC,EAAG,EAAC;KAAA,EAAC,CAAC;AACvC,CAAA,SAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AAE9B,CAAJ,MAAI,CAAA,GAAG,EAAG,EAAC,CAAC;AACZ,CAAA,IAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,QAAQ,EAAC,SAAA,CAAC;YAAI,CAAA,GAAG,GAAI,EAAC;KAAA,EAAC,CAAC;AACjC,CAAA,SAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;GAExB,CAAC,CAAC;AAEH,CAAA,GAAE,CAAC,yBAAyB,CAAE,UAAS,IAAI;;AAEvC,CAAA,OAAI,SAAS,EAAG,QAAO,CAAC;AACxB,CAAA,UAAO,IAAI,CAAC,IAAI,CAAC,CAAC;AAClB,CAAA,aAAU,EAAC,SAAA,AAAE,CAAI;AACb,CAAA,YAAO,IAAI,MAAM,CAAC;AAClB,CAAA,WAAM,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACpC,CAAA,SAAI,EAAE,CAAC;KACV,EAAE,EAAC,CAAC,CAAC;GAGT,CAAC,CAAC;AAEH,CAAA,GAAE,CAAC,sCAAsC,CAAE,UAAS,IAAI;;AAEpD,CAAA,OAAI,SAAS,EAAG,QAAO,CAAC;AACxB,CAAA,UAAO,IAAI,CAAC,IAAI,CAAC,CAAC;AAClB,CAAA,aAAU,EAAC,SAAA,AAAE,CAAI;AACb,CAAA,YAAO,IAAI,MAAM,CAAC;AAClB,CAAA,WAAM,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACpC,CAAA,SAAI,EAAE,CAAC;KACV,EAAE,EAAC,CAAC,CAAC;GAGT,CAAC,CAAC;CAEN,CAAC,CAAC;CAAA","sourcesContent":["describe(\"arrow functions\", function(){\r\n\r\n    it(\"provide a short syntax for defining functions\", function(){\r\n\r\n        let add = (x,y) => x + y;\r\n        let square = x => x * x;\r\n        let log = () => console.log(\"hello!\");\r\n\r\n        log();\r\n        let result = square(add(3,5));\r\n        expect(result).toBe(64);\r\n\r\n    });\r\n\r\n    it(\"can be used with map and forEach\", function(){\r\n\r\n        var result = [1,2,3,4].map(n => n * 2);\r\n        expect(result).toEqual([2,4,6,8]);\r\n\r\n        var sum = 0;\r\n        [1,2,3,4].forEach(n => sum += n);\r\n        expect(sum).toBe(10);\r\n\r\n    });\r\n\r\n    it(\"lexically binds to this\", function(done){\r\n\r\n        this.userName = \"Scott\";\r\n        console.log(this);\r\n        setTimeout(() => {\r\n            console.log(this);\r\n            expect(this.userName).toBe(\"Scott\");\r\n            done();\r\n        }, 0);\r\n\r\n\r\n    });\r\n\r\n    it(\"lexically binds to this (with class)\", function(done){\r\n\r\n        this.userName = \"Scott\";\r\n        console.log(this);\r\n        setTimeout(() => {\r\n            console.log(this);\r\n            expect(this.userName).toBe(\"Scott\");\r\n            done();\r\n        }, 0);\r\n\r\n\r\n    });\r\n\r\n});"]}