{"version":3,"file":"iterators.js","sources":["iterators.js"],"names":[],"mappings":"AAiKA;CAAA","sourcesContent":["// describe(\"iterators\", function(){\r\n\r\n//     it(\"works with iterator method at low level\", function(){\r\n//         let sum = 0;\r\n//         let numbers = [1,2,3,4];\r\n\r\n//         let iterator = numbers.values();\r\n//         let next = iterator.next();\r\n//         while(!next.done){\r\n//             sum += next.value;\r\n//             next = iterator.next();\r\n//         }\r\n//         expect(sum).toBe(10);\r\n//     });\r\n\r\n//     it(\"cannot 'for in' over iterable\", function(){\r\n//         let sum = 0;\r\n//         let numbers = [1,2,3,4];\r\n\r\n//         for(let i in numbers.values()) {\r\n//             sum += i;\r\n//         }\r\n//         expect(sum === 10).toBe(false);\r\n//     });\r\n\r\n//     it(\"can 'for of' over iterable\", function(){\r\n//         let sum = 0;\r\n//         let numbers = [1,2,3,4];\r\n\r\n//         for(let n of numbers) {\r\n//             sum += n;\r\n//         }\r\n//         expect(sum).toBe(10);\r\n//     });\r\n\r\n//     it(\"can get an iterator from array the hard way\", function(){\r\n\r\n//         let sum = 0;\r\n//         let numbers = [1,2,3,4];\r\n//         let iterator = numbers[Symbol.iterator]();\r\n\r\n//         let next = iterator.next();\r\n//         while(!next.done){\r\n//             sum += next.value;\r\n//             next = iterator.next();\r\n//         }\r\n//         expect(sum).toBe(10);\r\n\r\n//     });\r\n\r\n//     it(\"can build your own\", function(){\r\n\r\n//         class Classroom {\r\n\r\n//             constructor() {\r\n//                 this.students = [\"Tim\", \"Joy\", \"Sue\"];\r\n//             }\r\n\r\n//             [Symbol.iterator]() {\r\n//                 var index = 0;\r\n//                 return {\r\n//                     next: () => {\r\n//                         if(index < this.students.length){\r\n//                             index += 1;\r\n//                             return {done: false, value: this.students[index-1]};\r\n//                         }\r\n//                         return { value: undefined, done: true };\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n\r\n//         let scienceClass = new Classroom();\r\n//         let result = [];\r\n//         for(let name of scienceClass){\r\n//             result.push(name);\r\n//         }\r\n//         expect(result).toEqual([\"Tim\", \"Joy\", \"Sue\"]);\r\n\r\n//     });\r\n\r\n//     it(\"can build your own with a class\", function(){\r\n\r\n//         class Classroom {\r\n\r\n//             constructor() {\r\n//                 this.students = [\"Tim\", \"Joy\", \"Sue\"];\r\n//             }\r\n\r\n//             [Symbol.iterator]() {\r\n//                 return new ArrayIterator(this.students);\r\n//             }\r\n//         }\r\n\r\n//         class ArrayIterator {\r\n//             constructor(array) {\r\n//                 this.array = array;\r\n//                 this.index = 0;\r\n//             }\r\n//             next() {\r\n//                 var result = { value: undefined, done: true};\r\n//                 if(this.index < this.array.length) {\r\n//                     resut.value = this.array[this.index];\r\n//                     result.done = false;\r\n//                     this.index += 1;\r\n//                 }\r\n//                 return result;\r\n//             }\r\n//         }\r\n\r\n//         let scienceClass = new Classroom();\r\n//         let result = [];\r\n//         for(let name of scienceClass){\r\n//             result.push(name);\r\n//         }\r\n//         expect(result).toEqual([\"Tim\", \"Joy\", \"Sue\"]);\r\n\r\n//     });\r\n    \r\n//     it(\"can take a parameter from next(param)\", function() {\r\n\r\n// \t\tlet range = function*(start, end) {\r\n// \t\t\tlet current = start;\r\n// \t\t\twhile(current <= end) {\r\n// \t\t\t\tlet delta = yield current;\r\n// \t\t\t\tcurrent += delta || 1;\r\n// \t\t\t}\r\n// \t\t}\r\n\r\n// \t\tlet range2 = function(start, end) {\r\n// \t\t    let current = start;\r\n// \t\t    let first = true;\r\n// \t\t    return {\r\n// \t\t    \tnext(delta = 1) {\r\n// \t\t    \t\tlet result = { value: undefined, done: true };\r\n// \t\t    \t\tif(current <= end) {\r\n// \t\t    \t\t    if(!first) {\r\n// \t\t\t\t\tcurrent += delta;\r\n// \t\t    \t\t    }\r\n// \t\t    \t\t    result.value = current;\r\n// \t\t    \t\t    result.done = false;\r\n// \t\t    \t\t    first = false;\r\n// \t\t    \t\t}\r\n// \t\t    \t\treturn result;\r\n// \t\t    \t}\r\n// \t\t    }\r\n// \t\t}\r\n\t\t\r\n\r\n// \t\tlet result = [];\r\n// \t\tlet iterator = range2(1,10);\r\n// \t\tlet next = iterator.next();\r\n// \t\twhile(!next.done) {\r\n// \t\t\tresult.push(next.value);\r\n// \t\t\tnext = iterator.next(next.value);\r\n// \t\t}\r\n\r\n// \t\texpect(result).toEqual([1, 3, 7]);\r\n// \t});\r\n    \r\n// });\r\n"]}