{"version":3,"file":"destructuring.js","sources":["destructuring.js","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/4"],"names":[],"mappings":"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","sourcesContent":["\r\n\r\n\r\ndescribe(\"destructuring\", function() {\r\n\t\"use strict\";\r\n\r\n    it(\"has simple examples\", function(){\r\n\r\n        let values = [22, 44];\r\n        let [x, y] = values;\r\n\r\n        expect(x).toBe(22);\r\n        expect(y).toBe(44);\r\n\r\n        var person = { firstName: \"Scott\", lastName: \"Allen\" };\r\n        var {firstName, lastName} = person;\r\n\r\n        expect(firstName).toBe(\"Scott\");\r\n        expect(lastName).toBe(\"Allen\");\r\n\r\n        var x = 10, y = 20;\r\n\r\n        // swap!!\r\n        [x,y] = [y,x];\r\n\r\n        expect(x).toBe(20);\r\n        expect(y).toBe(10);\r\n\r\n        var doWork = function({firstName, lastName, role=\"developer\"}) {\r\n            return role + \" \" + firstName + \" \" + lastName;\r\n        };\r\n\r\n        let httpPost = function(){\r\n            // ...\r\n        };\r\n\r\n        var person = {firstName: \"Scott\", lastName: \"Allen\"};\r\n        var result = doWork(person);\r\n\r\n        expect(result).toBe(\"developer Scott Allen\");\r\n\r\n        let address = { state:\"Maryland\" };\r\n        let { state=\"New York\", country=\"USA\"} = address;\r\n\r\n        expect(state).toBe(\"Maryland\");\r\n        expect(country).toBe(\"USA\");\r\n\r\n        let odds = [1,3,5,7,9];\r\n        let [first, second, ...rest] = odds;\r\n\r\n        expect(first).toBe(1);\r\n        expect(second).toBe(3);\r\n        expect(rest).toEqual([5,7,9]);\r\n\r\n        var employee = {\r\n          firstName: \"Scott\",\r\n          address: {\r\n            state: \"Maryland\",\r\n            country: \"USA\"\r\n          },\r\n          favoriteNumbers: [45,55,32,13]\r\n        };\r\n\r\n        var { firstName, address: {state}, favoriteNumbers: [,second]} = employee;\r\n\r\n        expect(firstName).toBe(\"Scott\");\r\n        expect(state).toBe(\"Maryland\");\r\n        expect(second).toBe(55);\r\n    });\r\n\r\n\tit(\"can destructure arrays\", function() {\r\n\r\n\t\tvar doWork = function(){\r\n\t\t\treturn [1, 3, 2];\r\n\t\t};\r\n\r\n\t\tlet [, x, y, z] = doWork();\r\n\r\n\t\texpect(x).toBe(3);\r\n\t\texpect(y).toBe(2);\r\n\t\texpect(z).toBeUndefined();\r\n\r\n\t});\r\n\r\n\tit(\"can destructure objects\", function() {\r\n\r\n\t    let doWork = function() {\r\n\t\t     return {\r\n\t\t\t    firstName: \"Scott\",\r\n\t\t        lastName: \"Allen\",\r\n\t\t        handles: {\r\n\t\t        \ttwitter: \"OdeToCode\"    \r\n\t\t    \t}\r\n\t\t    };\t\t   \r\n\t\t};\r\n\r\n\t\tlet { \r\n\t\t\t\tfirstName, \r\n\t\t\t  \thandles:{twitter}\r\n\t\t\t} = doWork();\r\n\r\n\t\texpect(firstName).toBe(\"Scott\");\r\n\t\texpect(twitter).toBe(\"OdeToCode\");\r\n\r\n\t});\r\n\r\n\r\n\tit(\"works with parameters\", function() {\r\n\r\n\t\tlet doWork = function(url, {data, cache, headers}){\r\n\t\t\treturn data;\r\n\t\t};\r\n\r\n\t\t\r\n\t\tlet result = doWork(\r\n\t\t\t\t\"api/test\", {\r\n\t\t\t\t\tdata: \"test\", \r\n\t\t\t\t\tcache: false\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\r\n\t\texpect(result).toBe(\"test\");\r\n\r\n\t});\r\n\r\n});","$traceurRuntime.assertObject($__placeholder__0)","$__placeholder__0 = $__placeholder__1","($__placeholder__0 = $__placeholder__1.$__placeholder__2) === void 0 ?\n        $__placeholder__3 : $__placeholder__4","Array.prototype.slice.call($__placeholder__0, $__placeholder__1)"]}